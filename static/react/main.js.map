{"version":3,"sources":["logo.svg","Directory.js","Editor.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Directory","props","state","items","i","this","folders","length","push","type","name","id","documents","doc_type","folder","style","textAlign","maxWidth","margin","axios","get","then","response","setState","data","React","Component","Item","console","log","JSON","stringify","symbol","href","Diff","require","Editor","time","Date","getTime","content","old_content","hash","timestamp","diff_stack","checking","updateContent","bind","str","split","reduce","prevHash","currVal","charCodeAt","patch","createPatch","context","patch_lines","splice","join","diff","document","diff_hash","hashCode","post","status","reason","postStack","value","onChange","c","head","setInterval","check","fillContent","resp","obj","postData","pullData","error","new_doc","a","prompt","fetch","method","mode","headers","body","author","path","json","url","window","location","App","disp","bento_type","bento_id","bento_name","className","onClick","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"main.js","sourcesContent":["module.exports = __webpack_public_path__ + \"5d5d9eefa31e5e13a6610d9fa7a283bb.svg\";","import React from \"react\";\nimport axios from 'axios'\n\nexport class Directory extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {'folders': ['/'], 'documents': []};\n\t}\n\n\trender() {\n\t\tlet items = [];\n\t\tfor(let i = 0; i < this.state.folders.length; i++)\n\t\t\titems.push(<Item type='folder' name='/' id=\"1\"></Item>);\n\t\tfor(let i = 0; i < this.state.documents.length; i++)\n\t\t\titems.push(<Item type={this.state.documents[i].doc_type}\n\t\t\t\t\t\t\t name={this.state.documents[i].name}\n\t\t\t\t\t\t\t id={this.state.documents[i].id}></Item>);\n\t\t\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h2>Current path: {this.props.folder}</h2>\n\t\t\t\t<div style={{textAlign: 'left', maxWidth: '50%', margin: 'auto'}}>\n\t\t\t\t\t{ items }\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tcomponentDidMount()\n\t{\n\t\tif('folder' in this.props)\n\t\t\taxios.get('/api/folder/' + this.props.folder)\n\t\t\t.then(response => this.setState(response.data));\n\t\telse\n\t\t\taxios.get('/api/folder/1')\n\t\t\t.then(response => this.setState(response.data));\n\t}\n}\n\nexport class Item extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tconsole.log(JSON.stringify(props))\n\t}\n\t\n\trender() {\n\t\tlet symbol = '‚Åâ';\n\t\tif (this.props.type === 'folder')\n\t\t\tsymbol = 'üìÅ';\n\t\telse if (this.props.type === 'text')\n\t\t\tsymbol = '‚êÉ';\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<a href={'/doc/' + this.props.id}><h3>{symbol} {this.props.name}</h3></a>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React from 'react';\nimport axios from 'axios';\n//import Diff from 'diff';\nimport SimpleMDE from \"react-simplemde-editor\";\nimport \"easymde/dist/easymde.min.css\";\nlet Diff = require('diff');\n\n\nexport class Editor extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tlet time = new Date().getTime();\n\t\tthis.state = {content: '', old_content: 'loading...', hash: 0, timestamp: time, diff_stack: [], checking:false}\n\t\tthis.updateContent = this.updateContent.bind(this);\n\t}\n\t\n\thashCode(str) {\n\t\treturn str.split('').reduce((prevHash, currVal) =>\n\t\t\t(((prevHash << 5) - prevHash) + currVal.charCodeAt(0))|0, 0);\n\t}\n\t\n\n\tasync postData ()\n\t{\n\t\tif (this.state.content !== this.state.old_content)\n\t\t{\n\t\t\tconsole.log('Start');\n\t\t\tconsole.log(this.state.old_content);\n\t\t\tconsole.log(this.state.content);\n\t\t\tconsole.log(this.state.diff_stack);\n\t\t\tconsole.log('end');\n\t\t\tlet patch = Diff.createPatch('doc',this.state.old_content, this.state.content, 'old header','new header', {context:0});\n\n\t\t\t// Trim extra lines out of the patch.\n\t\t\tlet patch_lines = patch.split('\\n');\n\t\t\tpatch_lines.splice(0,4);\n\t\t\tpatch = patch_lines.join('\\n');\n\t\t\t\n\t\t\tconsole.log(patch);\n\t\t\tconsole.log('Posting diff');\n\t\t\tlet diff = {\n\t\t\t\t'time':new Date().getTime(),\n\t\t\t\t'content':patch,\n\t\t\t\t'author':'toben',\n\t\t\t\t'document':this.props.document,\n\t\t\t\t'parent':this.state.diff_stack[this.state.diff_stack.length-1].diff_hash\n\t\t\t}\n\t\t\tlet hash = this.hashCode(JSON.stringify(diff));\n\t\t\tdiff['diff_hash'] = hash;\n\t\t\t\n\t\t\tlet diff_stack = this.state.diff_stack;\n\t\t\tdiff_stack.push(diff)\n\t\t\tthis.setState({hash: hash, timestamp:new Date().getTime(), old_content: this.state.content, diff_stack: diff_stack});\n\t\t\t\n\t\t\taxios.post('/api/diff/' + this.props.document, diff)\n\t\t\t.then((response) => {\n\t\t\t\tif (response.data.status === 'failure')\n\t\t\t\t{\n\t\t\t\t\tif (response.data.reason === 'The diff provided as parent did not exist.')\n\t\t\t\t\t\tthis.postStack();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\t\n\tasync postStack()\n\t{\n\t\taxios.post('/api/diffs/' + this.props.document, this.state.diff_stack)\n\t\t.then((response) => {console.log(\"Stack posted\"); console.log(response);});\n\t}\n\tupdateContent(value)\n\t{\n//\t\tconsole.log(value);\n//\t\tconsole.log(this.state.diff_stack);\n//\t\tlet time = (new Date().getTime() - this.state.timestamp) / 1000;\n//\t\tconsole.log(time);\n//\t\tif (time > 2) // increase this value to decrease refresh rate. \n//\t\t\tthis.postData(value);\n\t\tthis.setState({content: value});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h2>{this.props.name}</h2>\n\t\t\t\t<br/>\n\t\t\t\t<SimpleMDE id=\"editor\" name=\"editor\" style={{textAlign:'left'}}\n\t\t\t\t\tonChange={this.updateContent} value={this.state.content} />\n\t\t\t\t<br/>\n\t\t\t\t<a href=\"/\">Back</a>\n\t\t\t</div>\n\t\t);\n\t}\n\t\n\tfillContent(data)\n\t{\n\t\tconsole.log(data);\n\t\tlet c = data[0].head;\n\t\tif (c == null)\n\t\t\tc = '';\n\t\tthis.setState({content:c,old_content:c,diff_stack:[data[1]]});\n\t\tsetInterval(() => {this.check()},2000);\n\t}\n\n\tcomponentDidMount()\n\t{\n\t\taxios.get('/api/doc/' + this.props.document)\n\t\t.then(response => this.fillContent(response.data));\n\t}\n\t\n\tpullData()\n\t{\n\t\taxios.get('/api/diff/' + this.props.document)\n\t\t.then(response => {\n\t\t\tconsole.log({resp:response,obj:this});\n\t\t\tconsole.log('Current hash on server: ' + response.data.diff_hash);\n\t\t\tconsole.log('Current hash locally: ' + this.state.diff_stack[this.state.diff_stack.length-1].diff_hash);\n\t\t\tif (response.data.diff_hash !== this.state.diff_stack[this.state.diff_stack.length-1].diff_hash)\n\t\t\t{\n\t\t\t\t//The remote document has changed!\n\t\t\t\tconsole.log('//The remote document has changed!');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tconsole.log('Still in sync');\n\t\t\t}\n\t\t});\n\t}\n\t\n\tcheck()\n\t{\n\t\ttry\n\t\t{\n\t\t\t// Don't run if the previous check method is still running.\n\t\t\tif (this.state.checking)\n\t\t\t\treturn false\n\n\t\t\tthis.setState({checking:true});\n\t\t\t// Post current data\n\t\t\tthis.postData();\n\t\t\t\n\t\t\t// Check for updates from the server\n\t\t\tthis.pullData();\n\t\t\t\n\t\t\tthis.setState({checking:false});\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\tconsole.error(error);\n\t\t}\n\t}\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Directory } from './Directory.js';\nimport { Editor } from './Editor.js';\n\n\n\nasync function new_doc() \n{ \n\tlet name = prompt(\"Name of new document: \",\"Untitled\"); \n\tconsole.log(name); \n\tconst response = await fetch('/api/doc/', { \n\t\tmethod: 'POST', \n\t\tmode: 'cors', \n\t\theaders: {'Content-Type': 'application/json'}, \n\t\tbody: JSON.stringify({name:name, author:'Toben', path:'/'})}) \n\t\t.then(function(resp) { \n\t\t\tconsole.log('resp: '); \n\t\t\tconsole.log(resp); \n\t\t\treturn resp.json(); \n\t\t}).then(function(data) { \n\t\t\tconsole.log(data); \n\t\t\tlet url = '/doc/' + data['id']; \n\t\t\tconsole.log(url); \n\t\t\twindow.location = url; \n\t\t}); \n\t\t \n} \n\n//function load_doc() \n//{ \n//\tlet l = document.getElementById(\"doc_list\"); \n//\tlet url = \"/doc/\" + l.options[l.selectedIndex].value; \n//\tconsole.log(url); \n//\twindow.location = url; \n//}\n\nfunction App() {\n\tlet disp = '';\n\tif (window.bento_type == 'folder')\n\t\tdisp = (<Directory folder={window.bento_id} name={window.bento_name}></Directory>)\n\telse\n\t\tdisp = (<Editor document={window.bento_id} name={window.bento_name}></Editor>)\n\treturn (\n\t\t<div className=\"App\">\n\t\t<h1>Bento!</h1> \n\t\t<button onClick={new_doc}>New</button>\n\t\t{ disp }\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}