{"version":3,"sources":["DirectoryViews/ViewManager.js","Directory.js","Editor.js","App.js","serviceWorker.js","index.js"],"names":["ViewManager","props","items","console","log","this","i","folders","length","push","type","name","id","documents","doc_type","folder","style","textAlign","maxWidth","margin","React","Component","Item","JSON","stringify","symbol","href","Directory","state","onClick","new_doc","axios","get","then","response","setState","data","a","prompt","fetch","method","mode","headers","body","author","path","resp","json","url","window","location","Diff","require","Editor","time","Date","getTime","content","old_content","hash","timestamp","diff_stack","checking","updateContent","bind","str","split","reduce","prevHash","currVal","charCodeAt","patch","createPatch","context","patch_lines","splice","join","diff","document","diff_hash","hashCode","post","status","reason","postStack","value","onChange","c","head","setInterval","check","fillContent","hashes","includes","postData","pullData","error","App","disp","bento_type","bento_id","bento_name","className","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"main.js","sourcesContent":["import React from \"react\";\n\nexport class ViewManager extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t}\n\n\trender() {\n\t\tlet items = [];\n\t\tconsole.log(this.props);\n\t\tfor(let i = 0; i < this.props.folders.length; i++)\n\t\t\titems.push(<Item type='folder' name='/' id=\"1\"></Item>);\n\t\tif (this.props.documents)\n\t\t\tfor(let i = 0; i < this.props.documents.length; i++)\n\t\t\t\titems.push(<Item type={this.props.documents[i].doc_type}\n\t\t\t\t\t\t\t\t name={this.props.documents[i].name}\n\t\t\t\t\t\t\t\t id={this.props.documents[i].id}></Item>);\n\t\t\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h2>Current path: {this.props.folder}</h2>\n\t\t\t\t<div style={{textAlign: 'left', maxWidth: '50%', margin: 'auto'}}>\n\t\t\t\t\t{ items }\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport class Item extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tconsole.log(JSON.stringify(props))\n\t}\n\t\n\trender() {\n\t\tlet symbol = '‚Åâ';\n\t\tif (this.props.type === 'folder')\n\t\t\tsymbol = 'üìÅ';\n\t\telse if (this.props.type === 'text')\n\t\t\tsymbol = '‚êÉ';\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<a href={'/doc/' + this.props.id}><h3>{symbol} {this.props.name}</h3></a>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React from \"react\";\nimport axios from 'axios';\nimport { ViewManager } from './DirectoryViews/ViewManager.js'\n\nexport class Directory extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {'folders': ['/'], 'documents': []};\n\t}\n\n\trender() {\n\t\tlet items = [];\n//\t\tconsole.log(this.state);\n//\t\tfor(let i = 0; i < this.state.folders.length; i++)\n//\t\t\titems.push(<Item type='folder' name='/' id=\"1\"></Item>);\n//\t\tfor(let i = 0; i < this.state.documents.length; i++)\n//\t\t\titems.push(<Item type={this.state.documents[i].doc_type}\n//\t\t\t\t\t\t\t name={this.state.documents[i].name}\n//\t\t\t\t\t\t\t id={this.state.documents[i].id}></Item>);\n\t\t\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>Bento!</h1> \n\t\t\t\t<button onClick={new_doc}>New</button>\n\t\t\t\t<h2>Current path: {this.props.folder}</h2>\n\t\t\t\t<ViewManager folders={this.state.folders} documents={this.state.documents}></ViewManager>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tcomponentDidMount()\n\t{\n\t\tif('folder' in this.props)\n\t\t\taxios.get('/api/folder/' + this.props.folder)\n\t\t\t.then(response => this.setState(response.data));\n\t\telse\n\t\t\taxios.get('/api/folder/1')\n\t\t\t.then(response => this.setState(response.data));\n\t}\n}\n\nexport class Item extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tconsole.log(JSON.stringify(props))\n\t}\n\t\n\trender() {\n\t\tlet symbol = '‚Åâ';\n\t\tif (this.props.type === 'folder')\n\t\t\tsymbol = 'üìÅ';\n\t\telse if (this.props.type === 'text')\n\t\t\tsymbol = '‚êÉ';\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<a href={'/doc/' + this.props.id}><h3>{symbol} {this.props.name}</h3></a>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nasync function new_doc()\n{ \n\tlet name = prompt(\"Name of new document: \",\"Untitled\"); \n\tconsole.log(name); \n\tawait fetch('/api/doc/', { \n\t\tmethod: 'POST', \n\t\tmode: 'cors', \n\t\theaders: {'Content-Type': 'application/json'}, \n\t\tbody: JSON.stringify({name:name, author:'Toben', path:'/'})}) \n\t\t.then(function(resp) { \n\t\t\tconsole.log('resp: '); \n\t\t\tconsole.log(resp); \n\t\t\treturn resp.json(); \n\t\t}).then(function(data) { \n\t\t\tconsole.log(data); \n\t\t\tlet url = '/doc/' + data['id']; \n\t\t\tconsole.log(url); \n\t\t\twindow.location = url; \n\t\t}); \n}\n","import React from 'react';\nimport axios from 'axios';\n//import Diff from 'diff';\nimport SimpleMDE from \"react-simplemde-editor\";\nimport \"easymde/dist/easymde.min.css\";\nlet Diff = require('diff');\n\n\nexport class Editor extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tlet time = new Date().getTime();\n\t\tthis.state = {content: '', old_content: 'loading...', hash: 0, timestamp: time, diff_stack: [], checking:false}\n\t\tthis.updateContent = this.updateContent.bind(this);\n\t}\n\t\n\thashCode(str) {\n\t\treturn str.split('').reduce((prevHash, currVal) =>\n\t\t\t(((prevHash << 5) - prevHash) + currVal.charCodeAt(0))|0, 0);\n\t}\n\t\n\n\tasync postData ()\n\t{\n\t\tif (this.state.content !== this.state.old_content)\n\t\t{\n\t\t\tconsole.log('Start');\n\t\t\tconsole.log(this.state.old_content);\n\t\t\tconsole.log(this.state.content);\n\t\t\tconsole.log(this.state.diff_stack);\n\t\t\tconsole.log('end');\n\t\t\tlet patch = Diff.createPatch('doc',this.state.old_content, this.state.content, 'old header','new header', {context:0});\n\n\t\t\t// Trim extra lines out of the patch.\n\t\t\tlet patch_lines = patch.split('\\n');\n\t\t\tpatch_lines.splice(0,4);\n\t\t\tpatch = patch_lines.join('\\n');\n\t\t\t\n\t\t\tconsole.log(patch);\n\t\t\tconsole.log('Posting diff');\n\t\t\tlet diff = {\n\t\t\t\t'time':new Date().getTime(),\n\t\t\t\t'content':patch,\n\t\t\t\t'author':'toben',\n\t\t\t\t'document':this.props.document,\n\t\t\t\t'parent':this.state.diff_stack[this.state.diff_stack.length-1].diff_hash\n\t\t\t}\n\t\t\tlet hash = this.hashCode(JSON.stringify(diff));\n\t\t\tdiff['diff_hash'] = hash;\n\t\t\t\n\t\t\tlet diff_stack = this.state.diff_stack;\n\t\t\tdiff_stack.push(diff)\n\t\t\tthis.setState({hash: hash, timestamp:new Date().getTime(), old_content: this.state.content, diff_stack: diff_stack});\n\t\t\t\n\t\t\taxios.post('/api/diff/' + this.props.document, diff)\n\t\t\t.then((response) => {\n\t\t\t\tif (response.data.status === 'failure')\n\t\t\t\t{\n\t\t\t\t\tif (response.data.reason === 'The diff provided as parent did not exist.')\n\t\t\t\t\t\tthis.postStack();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\t\n\tasync postStack()\n\t{\n\t\taxios.post('/api/diffs/' + this.props.document, this.state.diff_stack)\n\t\t.then((response) => {console.log(\"Stack posted\"); console.log(response);});\n\t}\n\tupdateContent(value)\n\t{\n//\t\tconsole.log(value);\n//\t\tconsole.log(this.state.diff_stack);\n//\t\tlet time = (new Date().getTime() - this.state.timestamp) / 1000;\n//\t\tconsole.log(time);\n//\t\tif (time > 2) // increase this value to decrease refresh rate. \n//\t\t\tthis.postData(value);\n\t\tthis.setState({content: value});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h2>{this.props.name}</h2>\n\t\t\t\t<br/>\n\t\t\t\t<SimpleMDE id=\"editor\" name=\"editor\" style={{textAlign:'left'}}\n\t\t\t\t\tonChange={this.updateContent} value={this.state.content} />\n\t\t\t\t<br/>\n\t\t\t\t<a href=\"/\">Back</a>\n\t\t\t</div>\n\t\t);\n\t}\n\t\n\tfillContent(data)\n\t{\n\t\tconsole.log(data);\n\t\tlet c = data[0].head;\n\t\tif (c == null)\n\t\t\tc = '';\n\t\tthis.setState({content:c,old_content:c,diff_stack:[data[1]]});\n\t\tsetInterval(() => {this.check()},2000);\n\t}\n\n\tcomponentDidMount()\n\t{\n\t\taxios.get('/api/doc/' + this.props.document)\n\t\t.then(response => this.fillContent(response.data));\n\t}\n\t\n\tpullData()\n\t{\n\t\taxios.get('/api/diff/' + this.props.document)\n\t\t.then(response => {\n\t\t\tif (response.data.diff_hash !== this.state.diff_stack[this.state.diff_stack.length-1].diff_hash)\n\t\t\t{\n\t\t\t\tlet hashes = [];\n\t\t\t\tfor(let i = 0; i < this.state.diff_stack.length; i++)\n\t\t\t\t\thashes.push(this.state.diff_stack[i].diff_hash);\n\t\t\t\t//The remote document has changed!\n\t\t\t\tif (!hashes.includes(response.data.diff_hash))\n\t\t\t\t\taxios.get('/api/doc/' + this.props.document)\n\t\t\t\t\t.then(response => this.fillContent(response.data));\n\t\t\t}\n\t\t});\n\t}\n\t\n\tcheck()\n\t{\n\t\ttry\n\t\t{\n\t\t\t// Don't run if the previous check method is still running.\n\t\t\tif (this.state.checking)\n\t\t\t\treturn false\n\n\t\t\tthis.setState({checking:true});\n\t\t\t// Post current data\n\t\t\tthis.postData();\n\t\t\t\n\t\t\t// Check for updates from the server\n\t\t\tthis.pullData();\n\t\t\t\n\t\t\tthis.setState({checking:false});\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\tconsole.error(error);\n\t\t}\n\t}\n}\n","import React from 'react';\nimport './App.css';\nimport { Directory } from './Directory.js';\nimport { Editor } from './Editor.js';\n\n\n\nfunction App() {\n\tlet disp = '';\n\tif (window.bento_type === 'folder')\n\t\tdisp = (<Directory folder={window.bento_id} name={window.bento_name}></Directory>)\n\telse\n\t\tdisp = (<Editor document={window.bento_id} name={window.bento_name}></Editor>)\n\treturn (\n\t\t<div className=\"App\">\n\t\t{ disp }\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}